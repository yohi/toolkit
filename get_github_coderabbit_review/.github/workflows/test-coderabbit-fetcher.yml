name: 🧪 CodeRabbit Fetcher Tests

on:
  push:
    paths:
      - "get_github_coderabbit_review/**"
      - "!get_github_coderabbit_review/**.md"
      - "!get_github_coderabbit_review/docs/**"
      - "!get_github_coderabbit_review/examples/**"
    branches: [main, develop, "task-*", "feature-*"]
  pull_request:
    paths:
      - "get_github_coderabbit_review/**"
      - "!get_github_coderabbit_review/**.md"
      - "!get_github_coderabbit_review/docs/**"
      - "!get_github_coderabbit_review/examples/**"
    branches: [main, develop]

env:
  # Python設定
  PYTHON_VERSION: "3.11"
  # プロジェクトディレクトリ
  PROJECT_DIR: get_github_coderabbit_review
  # テスト設定
  PYTHONPATH: ${{ github.workspace }}/get_github_coderabbit_review
  # CI環境であることを明示
  CI: true

jobs:
  # 🔍 ファイル変更検知ジョブ
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      core-changed: ${{ steps.changes.outputs.core }}
      tests-changed: ${{ steps.changes.outputs.tests }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Check for changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            core:
              - 'get_github_coderabbit_review/coderabbit_fetcher/**'
              - 'get_github_coderabbit_review/pyproject.toml'
              - 'get_github_coderabbit_review/uv.lock'
            tests:
              - 'get_github_coderabbit_review/tests/**'
            config:
              - '.github/workflows/**'
              - 'get_github_coderabbit_review/Makefile'

  # 🧪 単体テスト実行ジョブ
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.core-changed == 'true' || needs.detect-changes.outputs.tests-changed == 'true'
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: 🔧 Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv sync --dev
          uv pip install pytest pytest-cov pytest-xdist

      - name: 🧪 Run unit tests
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv run python tests/test_runner.py --type unit --verbosity 2

      - name: 📊 Generate coverage report
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv run python -m pytest tests/unit/ --cov=coderabbit_fetcher --cov-report=xml --cov-report=term-missing

      - name: 📈 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.PROJECT_DIR }}/coverage.xml
          flags: unit-tests
          name: unit-tests-${{ matrix.python-version }}

  # 🔗 統合テスト実行ジョブ
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.core-changed == 'true' || needs.detect-changes.outputs.tests-changed == 'true'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: 🔧 Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv sync --dev

      - name: 🔗 Run integration tests
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv run python tests/test_runner.py --type integration --verbosity 2

  # 🎯 Essential Tests（PR固有テスト）
  essential-tests:
    name: 🎯 Essential Tests (PR38/PR2)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.core-changed == 'true' || needs.detect-changes.outputs.tests-changed == 'true'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: 🔧 Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv sync --dev

      - name: 🎯 Run essential tests (モック化)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv run python tests/run_essential_tests.py

      - name: 📋 Validate PR38 mock test
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "🔍 PR38モック化テスト個別実行"
          uv run python tests/pr38/test_pr38_final.py

      - name: 📋 Validate PR2 mock test
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "🔍 PR2モック化テスト個別実行"
          uv run python tests/pr2/test_pr2_quiet_mode.py

  # ⚡ パフォーマンステスト実行ジョブ
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, unit-tests]
    if: needs.detect-changes.outputs.core-changed == 'true'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: 🔧 Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv sync --dev

      - name: ⚡ Run performance tests
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv run python tests/test_runner.py --type performance --verbosity 2

  # 🔍 コード品質チェックジョブ
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.core-changed == 'true'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: 🔧 Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv sync --dev
          uv pip install ruff mypy black isort

      - name: 🔍 Run linting (ruff)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv run ruff check coderabbit_fetcher/

      - name: 🎨 Check code formatting (black)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv run black --check coderabbit_fetcher/

      - name: 🔢 Check import sorting (isort)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv run isort --check-only coderabbit_fetcher/

      - name: 🏷️ Run type checking (mypy)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          uv run mypy coderabbit_fetcher/
        continue-on-error: true # mypy エラーは警告として扱う

  # 📊 テスト結果サマリージョブ
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        detect-changes,
        unit-tests,
        integration-tests,
        essential-tests,
        performance-tests,
        code-quality,
      ]
    if: always() && (needs.detect-changes.outputs.core-changed == 'true' || needs.detect-changes.outputs.tests-changed == 'true')

    steps:
      - name: 📊 Summarize test results
        run: |
          echo "## 🧪 CodeRabbit Fetcher Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Test Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Essential Tests | ${{ needs.essential-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚡ Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || needs.performance-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || needs.code-quality.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Change Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Core Changes**: ${{ needs.detect-changes.outputs.core-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Changes**: ${{ needs.detect-changes.outputs.tests-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Config Changes**: ${{ needs.detect-changes.outputs.config-changed }}" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Mark as success
        if: needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.essential-tests.result == 'success'
        run: |
          echo "🎉 All critical tests passed!"
          echo "✅ CodeRabbit Fetcher is ready for deployment"

      - name: ❌ Mark as failure
        if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.essential-tests.result == 'failure'
        run: |
          echo "❌ Critical tests failed!"
          echo "🔧 Please fix the failing tests before merging"
          exit 1
